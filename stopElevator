/*
在繁忙的时间，每次电梯从一层往上走时，我们只允许电梯停在其中的某一层。 
所有乘客都从一楼上电梯，到达某层楼后，电梯听下来，所有乘客再从这里爬楼梯到自己的目的层。 
 在一楼时，每个乘客选择自己的目的层，电梯则自动计算出应停的楼层。 
  问：电梯停在哪一层楼，能够保证这次乘坐电梯的所有乘客爬楼梯的层数之和最少？ 
   
        思路:当电梯停靠在第i层时,乘客所要爬的总的楼梯数为Y. 
        假设有N1个乘客要到达的层数<i,有N2个乘客要到达的层数==i,有N3个乘客要到达的层数>i. 
        所以: 
      	当电梯改停在i+1,则 Y+(N1+N2-N3) 
        所以当后面那部分的值<0时,则加上负数后总的楼梯数比原来的小,即更优解. 
        因此,我们可以从第一层开始,用以上策略,考察N1,N2,N3的值,依次调整以得到最优解. 
         但是 注意停在第二层需要单独讨论
        
        reference : http://www.programgo.com/article/317386365/
*/

public class stopElevator{
	public static void main(String[] args) {
		stopElevator elevator=new stopElevator();  
        int[] person={0,2,5,7,8,9,6,6,1,4,4,8,5,2,4,5,8,6,3,3,5,9,9,6,6,9,8,8,5,5,9,6,6,3};//person[i]表示要到第i层的人数  
        elevator.opt(person);    

	}


	public void opt(int []person){
		if (person == null){
		return;
		}
		if (person.length<2){
		return;
		}
		//停在二楼需要单独讨论，因为N1不更新
		//N1 表示往下走的人个数，N2表示停的楼层的人的个数， N3表示往上走的人的个数
		int targetFloor = 2;
		int minStairs = 0;
		int N1 = 0;
		int N2 = person[2];
		int N3 =0;
		for (int i =3; i< (person.length-1); i++){
			N3 += person[i]
			minStairs += person[i]*(i-targetFloor)
		}
		//电梯继续上行
		for (int j = 3; j < (person.length -1); j++{
			if (N1+N2 < N3){
				targetFloor = j;
				N1 = N1+N2;
				N2 =person[j]
				N3 = N3-person[j]
				minStairs += N1+N2 -N3
			}
		}
	System.out.println(targetFloor+","+minStairs);  
	}

}
